package com.onlineshop.config;

import java.sql.DriverManager;
import java.util.Properties;
import javax.sql.DataSource;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.orm.hibernate5.HibernateTransactionManager;
import org.springframework.orm.hibernate5.LocalSessionFactoryBean;
import org.springframework.transaction.annotation.EnableTransactionManagement;


/*@Configuration annotation indicates that this class contains one or more bean methods 
 * annotated with @Bean producing 
 * beans manageable by Spring container...
 * 
 * Note :- Bean is  a java class which is managed by Spring Container.
 * */
@SuppressWarnings("unused")
@Configuration 
@EnableTransactionManagement //this annotation means Spring will manage the transactions.
@ComponentScan({"com.onlineshop"}) //Here i am telling the name of my base package which is having all the required classes.
public class DBConfig{

	
	/*@Bean means object of DataSource is managed by Spring container. DataSource 
	 is an interface of javax.sql package and we know it is not possible to create 
	 the object of an interface . So Spring has provided child class of DataSource
	 which is DriverManagerDataSource*/
	@Bean("dataSource")
	public DataSource dataSource(){
		DriverManagerDataSource dataSource=new DriverManagerDataSource();
		
		/*To create the object of DriverManagerDataSource u need to provide database 
		 details like Drivername, Connection string ,username and password*/
		dataSource.setDriverClassName("org.h2.Driver");
		dataSource.setUrl("jdbc:h2:tcp://localhost/~/test");
		dataSource.setUsername("sa");
		dataSource.setPassword("");
		return dataSource;
	}
	
	
	
	
	/*Now we have to specify hibernate properties*/
	private Properties hibernateProperties(){
		
		Properties properties=new Properties();
		
		/*Dialect is a class through hibernate will get to know with which database
		 we want to connect . For every database , we have different type of 
		 Dialect*/
		properties.put("hibernate.dialect", "org.hibernate.dialect.H2Dialect");
		
		/*through show_sql property we want to specify whether we want to see the 
		 sql queries generated by hibernate on console or not.*/
        properties.put("hibernate.show_sql", "true");
        
        /*By setting the property hbm2ddl.auto to update ,I want to say If table is there , 
         make changes in the existing table.If table is not there in database , first
         hibernate will create the table and then do the required task */
        properties.put("hibernate.hbm2ddl.auto","update");
        return properties;   
	}
	
	/*SessionFactory is an interface which cant be instantiated . so Spring framework
	has provided one implementation class of SessionFactory which is LocalSessionFactoryBean
	*/
	@Bean
	public LocalSessionFactoryBean sessionFactory(){
		LocalSessionFactoryBean sessionFactory=new LocalSessionFactoryBean();
		
		//To LocalSessionFactoryBean we are providing the database details 
		//which we have written into dataSource() method created above
		sessionFactory.setDataSource((DataSource) dataSource());
		
		
		//Here we are providing the hibernate details we have written into hibernateProperties()
		//method written above. 
		sessionFactory.setHibernateProperties(hibernateProperties());
		
		//Here we have to specify the name of the package in which we have created our model
		sessionFactory.setPackagesToScan(new String[]{"com.onlineshop.models"});
		
		return sessionFactory;
	}
	
	
	
	
	/*We know , we have written @EnableTransactionManagement above this class
	 which means spring will manage the transaction . Spring has provided 
	 HibernateTransactionManager class to manage the transaction. But to 
	 create HibernateTransactionManager we needed SessionFactory which 
	 be provided by Spring container using @Autowired annotation*/
	@Bean
	@Autowired
	public HibernateTransactionManager transactionManager(SessionFactory s){
	HibernateTransactionManager txManager=new HibernateTransactionManager();
	txManager.setSessionFactory(s);
	return txManager;
	}

	
}









